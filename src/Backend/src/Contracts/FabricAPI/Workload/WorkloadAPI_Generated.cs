//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"

namespace Fabric_Extension_BE_Boilerplate.Contracts.FabricAPI.Workload
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IItemLifecycleController
    {

        /// <summary>
        /// Called by Microsoft Fabric for creating a new item.
        /// </summary>

        /// <remarks>
        /// Upon item creation Fabric performs basic validations, creates the item in a provisioning state and calls this API to notify the workload. The workload is expected to perform required validations, store the item metadata, allocate required resources, and update the Fabric item metadata cache with item relations and ETag.
        /// <br/>
        /// <br/>This API should accept SubjectAndApp authentication.
        /// <br/>
        /// <br/>## Permissions
        /// <br/>
        /// <br/>Permissions are checked by Microsoft Fabric.
        /// </remarks>

        /// <param name="workspaceId">The workspace ID.</param>

        /// <param name="itemType">The item type.</param>

        /// <param name="itemId">The item ID.</param>

        /// <param name="createItemRequest">The item creation request.</param>

        /// <returns>Successfully created.</returns>

        System.Threading.Tasks.Task CreateItemAsync(System.Guid workspaceId, string itemType, System.Guid itemId, CreateItemRequest createItemRequest);

        /// <summary>
        /// Called by Microsoft Fabric for updating an existing item.
        /// </summary>

        /// <remarks>
        /// Upon item update Fabric performs basic validations and calls this API to notify the workload. The workload is expected to perform required validations, store the item metadata, allocate and/or free resources, and update the Fabric item metadata cache with item relations and ETag.
        /// <br/>
        /// <br/>This API should accept SubjectAndApp authentication.
        /// <br/>
        /// <br/>## Permissions
        /// <br/>
        /// <br/>Permissions are checked by Microsoft Fabric.
        /// </remarks>

        /// <param name="workspaceId">The workspace ID.</param>

        /// <param name="itemType">The item type.</param>

        /// <param name="itemId">The item ID.</param>

        /// <param name="updateItemRequest">The item update request.</param>

        /// <returns>Successfully updated.</returns>

        System.Threading.Tasks.Task UpdateItemAsync(System.Guid workspaceId, string itemType, System.Guid itemId, UpdateItemRequest updateItemRequest);

        /// <summary>
        /// Called by Microsoft Fabric for deleting an existing item.
        /// </summary>

        /// <remarks>
        /// Upon item deletion Fabric performs basic validations and calls this API to notify the workload. The workload is expected to delete the item metadata and free resources. 
        /// <br/>
        /// <br/>This API should accept SubjectAndApp authentication. However, the subject token may be unavailable in some cases.
        /// <br/>
        /// <br/>## Permissions
        /// <br/>
        /// <br/>Permissions are checked by Microsoft Fabric.
        /// </remarks>

        /// <param name="workspaceId">The workspace ID.</param>

        /// <param name="itemType">The item type.</param>

        /// <param name="itemId">The item ID.</param>

        /// <returns>Successfully deleted.</returns>

        System.Threading.Tasks.Task DeleteItemAsync(System.Guid workspaceId, string itemType, System.Guid itemId);

        /// <summary>
        /// Called by Microsoft Fabric for retrieving the workload payload for an item.
        /// </summary>

        /// <remarks>
        /// When the item editor &amp;lt;iframe&amp;gt; requests an item, Fabric performs basic validations and calls this API to retrieve the payload from the workload.
        /// <br/>
        /// <br/>This API accepts SubjectAndApp authentication.
        /// <br/>
        /// <br/>## Permissions
        /// <br/>
        /// <br/>Permissions are checked by Microsoft Fabric.
        /// </remarks>

        /// <param name="workspaceId">The workspace ID.</param>

        /// <param name="itemType">The item type.</param>

        /// <param name="itemId">The item ID.</param>

        /// <returns>Completed successfully.</returns>

        System.Threading.Tasks.Task<GetItemPayloadResponse> GetItemPayloadAsync(System.Guid workspaceId, string itemType, System.Guid itemId);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Microsoft.AspNetCore.Mvc.Route("workload")]

    public partial class ItemLifecycleController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IItemLifecycleController _implementation;

        public ItemLifecycleController(IItemLifecycleController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// Called by Microsoft Fabric for creating a new item.
        /// </summary>
        /// <remarks>
        /// Upon item creation Fabric performs basic validations, creates the item in a provisioning state and calls this API to notify the workload. The workload is expected to perform required validations, store the item metadata, allocate required resources, and update the Fabric item metadata cache with item relations and ETag.
        /// <br/>
        /// <br/>This API should accept SubjectAndApp authentication.
        /// <br/>
        /// <br/>## Permissions
        /// <br/>
        /// <br/>Permissions are checked by Microsoft Fabric.
        /// </remarks>
        /// <param name="workspaceId">The workspace ID.</param>
        /// <param name="itemType">The item type.</param>
        /// <param name="itemId">The item ID.</param>
        /// <param name="createItemRequest">The item creation request.</param>
        /// <returns>Successfully created.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("workspaces/{workspaceId}/items/{itemType}/{itemId}")]
        public System.Threading.Tasks.Task CreateItem(System.Guid workspaceId, string itemType, System.Guid itemId, [Microsoft.AspNetCore.Mvc.FromBody] CreateItemRequest createItemRequest)
        {

            return _implementation.CreateItemAsync(workspaceId, itemType, itemId, createItemRequest);
        }

        /// <summary>
        /// Called by Microsoft Fabric for updating an existing item.
        /// </summary>
        /// <remarks>
        /// Upon item update Fabric performs basic validations and calls this API to notify the workload. The workload is expected to perform required validations, store the item metadata, allocate and/or free resources, and update the Fabric item metadata cache with item relations and ETag.
        /// <br/>
        /// <br/>This API should accept SubjectAndApp authentication.
        /// <br/>
        /// <br/>## Permissions
        /// <br/>
        /// <br/>Permissions are checked by Microsoft Fabric.
        /// </remarks>
        /// <param name="workspaceId">The workspace ID.</param>
        /// <param name="itemType">The item type.</param>
        /// <param name="itemId">The item ID.</param>
        /// <param name="updateItemRequest">The item update request.</param>
        /// <returns>Successfully updated.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("workspaces/{workspaceId}/items/{itemType}/{itemId}")]
        public System.Threading.Tasks.Task UpdateItem(System.Guid workspaceId, string itemType, System.Guid itemId, [Microsoft.AspNetCore.Mvc.FromBody] UpdateItemRequest updateItemRequest)
        {

            return _implementation.UpdateItemAsync(workspaceId, itemType, itemId, updateItemRequest);
        }

        /// <summary>
        /// Called by Microsoft Fabric for deleting an existing item.
        /// </summary>
        /// <remarks>
        /// Upon item deletion Fabric performs basic validations and calls this API to notify the workload. The workload is expected to delete the item metadata and free resources. 
        /// <br/>
        /// <br/>This API should accept SubjectAndApp authentication. However, the subject token may be unavailable in some cases.
        /// <br/>
        /// <br/>## Permissions
        /// <br/>
        /// <br/>Permissions are checked by Microsoft Fabric.
        /// </remarks>
        /// <param name="workspaceId">The workspace ID.</param>
        /// <param name="itemType">The item type.</param>
        /// <param name="itemId">The item ID.</param>
        /// <returns>Successfully deleted.</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("workspaces/{workspaceId}/items/{itemType}/{itemId}")]
        public System.Threading.Tasks.Task DeleteItem(System.Guid workspaceId, string itemType, System.Guid itemId)
        {

            return _implementation.DeleteItemAsync(workspaceId, itemType, itemId);
        }

        /// <summary>
        /// Called by Microsoft Fabric for retrieving the workload payload for an item.
        /// </summary>
        /// <remarks>
        /// When the item editor &amp;lt;iframe&amp;gt; requests an item, Fabric performs basic validations and calls this API to retrieve the payload from the workload.
        /// <br/>
        /// <br/>This API accepts SubjectAndApp authentication.
        /// <br/>
        /// <br/>## Permissions
        /// <br/>
        /// <br/>Permissions are checked by Microsoft Fabric.
        /// </remarks>
        /// <param name="workspaceId">The workspace ID.</param>
        /// <param name="itemType">The item type.</param>
        /// <param name="itemId">The item ID.</param>
        /// <returns>Completed successfully.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("workspaces/{workspaceId}/items/{itemType}/{itemId}/payload")]
        public System.Threading.Tasks.Task<GetItemPayloadResponse> GetItemPayload(System.Guid workspaceId, string itemType, System.Guid itemId)
        {

            return _implementation.GetItemPayloadAsync(workspaceId, itemType, itemId);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IJobsController
    {

        /// <summary>
        /// Called by Microsoft Fabric for starting a new job instance.
        /// </summary>

        /// <remarks>
        /// Fabric performs basic validations and calls this API to start a new instance of the job in the workload.
        /// <br/>
        /// <br/>This API should accept SubjectAndApp authentication.
        /// <br/>
        /// <br/>## Permissions
        /// <br/>
        /// <br/>Permissions are checked by Microsoft Fabric.
        /// </remarks>

        /// <param name="workspaceId">The workspace ID.</param>

        /// <param name="itemType">The item type.</param>

        /// <param name="itemId">The item ID.</param>

        /// <param name="jobType">The job type.</param>

        /// <param name="jobInstanceId">The job instance ID.</param>

        /// <param name="createItemJobInstanceRequest">The job instance properties.</param>

        /// <returns>Successfully scheduled.</returns>

        System.Threading.Tasks.Task CreateItemJobInstanceAsync(System.Guid workspaceId, string itemType, System.Guid itemId, string jobType, System.Guid jobInstanceId, CreateItemJobInstanceRequest createItemJobInstanceRequest);

        /// <summary>
        /// Called by Microsoft Fabric for retrieving a job instance state.
        /// </summary>

        /// <remarks>
        /// Fabric performs basic validations and calls this API to retrieve the item job instance state in the workload.
        /// <br/>
        /// <br/>This API should accept SubjectAndApp authentication.
        /// <br/>
        /// <br/>## Permissions
        /// <br/>
        /// <br/>Permissions are checked by Microsoft Fabric.
        /// </remarks>

        /// <param name="workspaceId">The workspace ID.</param>

        /// <param name="itemType">The item type.</param>

        /// <param name="itemId">The item ID.</param>

        /// <param name="jobType">The job type.</param>

        /// <param name="jobInstanceId">The job instance ID.</param>

        /// <returns>Completed successfully.</returns>

        System.Threading.Tasks.Task<ItemJobInstanceState> GetItemJobInstanceStateAsync(System.Guid workspaceId, string itemType, System.Guid itemId, string jobType, System.Guid jobInstanceId);

        /// <summary>
        /// Called by Microsoft Fabric for cancelling a job instance.
        /// </summary>

        /// <remarks>
        /// Fabric performs basic validations and calls this API to cancel an item job instance in the workload.
        /// <br/>
        /// <br/>This API should accept SubjectAndApp authentication.
        /// <br/>
        /// <br/>## Permissions
        /// <br/>
        /// <br/>Permissions are checked by Microsoft Fabric.
        /// </remarks>

        /// <param name="workspaceId">The workspace ID.</param>

        /// <param name="itemType">The item type.</param>

        /// <param name="itemId">The item ID.</param>

        /// <param name="jobType">The job type.</param>

        /// <param name="jobInstanceId">The job instance ID.</param>

        /// <returns>Completed successfully.</returns>

        System.Threading.Tasks.Task<ItemJobInstanceState> CancelItemJobInstanceAsync(System.Guid workspaceId, string itemType, System.Guid itemId, string jobType, System.Guid jobInstanceId);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Microsoft.AspNetCore.Mvc.Route("workload")]

    public partial class JobsController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IJobsController _implementation;

        public JobsController(IJobsController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// Called by Microsoft Fabric for starting a new job instance.
        /// </summary>
        /// <remarks>
        /// Fabric performs basic validations and calls this API to start a new instance of the job in the workload.
        /// <br/>
        /// <br/>This API should accept SubjectAndApp authentication.
        /// <br/>
        /// <br/>## Permissions
        /// <br/>
        /// <br/>Permissions are checked by Microsoft Fabric.
        /// </remarks>
        /// <param name="workspaceId">The workspace ID.</param>
        /// <param name="itemType">The item type.</param>
        /// <param name="itemId">The item ID.</param>
        /// <param name="jobType">The job type.</param>
        /// <param name="jobInstanceId">The job instance ID.</param>
        /// <param name="createItemJobInstanceRequest">The job instance properties.</param>
        /// <returns>Successfully scheduled.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("workspaces/{workspaceId}/items/{itemType}/{itemId}/jobTypes/{jobType}/instances/{jobInstanceId}")]
        public System.Threading.Tasks.Task CreateItemJobInstance(System.Guid workspaceId, string itemType, System.Guid itemId, string jobType, System.Guid jobInstanceId, [Microsoft.AspNetCore.Mvc.FromBody] CreateItemJobInstanceRequest createItemJobInstanceRequest)
        {

            return _implementation.CreateItemJobInstanceAsync(workspaceId, itemType, itemId, jobType, jobInstanceId, createItemJobInstanceRequest);
        }

        /// <summary>
        /// Called by Microsoft Fabric for retrieving a job instance state.
        /// </summary>
        /// <remarks>
        /// Fabric performs basic validations and calls this API to retrieve the item job instance state in the workload.
        /// <br/>
        /// <br/>This API should accept SubjectAndApp authentication.
        /// <br/>
        /// <br/>## Permissions
        /// <br/>
        /// <br/>Permissions are checked by Microsoft Fabric.
        /// </remarks>
        /// <param name="workspaceId">The workspace ID.</param>
        /// <param name="itemType">The item type.</param>
        /// <param name="itemId">The item ID.</param>
        /// <param name="jobType">The job type.</param>
        /// <param name="jobInstanceId">The job instance ID.</param>
        /// <returns>Completed successfully.</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("workspaces/{workspaceId}/items/{itemType}/{itemId}/jobTypes/{jobType}/instances/{jobInstanceId}")]
        public System.Threading.Tasks.Task<ItemJobInstanceState> GetItemJobInstanceState(System.Guid workspaceId, string itemType, System.Guid itemId, string jobType, System.Guid jobInstanceId)
        {

            return _implementation.GetItemJobInstanceStateAsync(workspaceId, itemType, itemId, jobType, jobInstanceId);
        }

        /// <summary>
        /// Called by Microsoft Fabric for cancelling a job instance.
        /// </summary>
        /// <remarks>
        /// Fabric performs basic validations and calls this API to cancel an item job instance in the workload.
        /// <br/>
        /// <br/>This API should accept SubjectAndApp authentication.
        /// <br/>
        /// <br/>## Permissions
        /// <br/>
        /// <br/>Permissions are checked by Microsoft Fabric.
        /// </remarks>
        /// <param name="workspaceId">The workspace ID.</param>
        /// <param name="itemType">The item type.</param>
        /// <param name="itemId">The item ID.</param>
        /// <param name="jobType">The job type.</param>
        /// <param name="jobInstanceId">The job instance ID.</param>
        /// <returns>Completed successfully.</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("workspaces/{workspaceId}/items/{itemType}/{itemId}/jobTypes/{jobType}/instances/{jobInstanceId}/cancel")]
        public System.Threading.Tasks.Task<ItemJobInstanceState> CancelItemJobInstance(System.Guid workspaceId, string itemType, System.Guid itemId, string jobType, System.Guid jobInstanceId)
        {

            return _implementation.CancelItemJobInstanceAsync(workspaceId, itemType, itemId, jobType, jobInstanceId);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IEndpointResolutionController
    {

        /// <summary>
        /// Resolve an endpoint for a given service called by Microsoft Fabric
        /// </summary>

        /// <remarks>
        /// Resolves the endpoint for a given service called by Microsoft Fabric based on the tenant's region and workspace region. Fabric provides a set of context properties and returns the appropriate service endpoint URL and its time-to-live (TTL).
        /// <br/>
        /// <br/>The Endpoint Resolution API is crucial for services that require dynamic endpoint determination based on operational context. This allows for optimized routing and regional compliance.
        /// <br/>
        /// <br/>To resolve an endpoint, Fabric will send a POST request with the required context properties in the request body. The response will contain the resolved URL and its TTL, which indicates how long the URL is considered valid.
        /// <br/>
        /// <br/>For a sample implementation and usage examples, please refer to the [Endpoint Resolution Sample Code](https://github.com/microsoft/Microsoft-Fabric-workload-development-sample/blob/main/Backend/src/Controllers/EndpointResolutionControllerImpl.cs).
        /// </remarks>

        /// <param name="body">Endpoint resolution request payload</param>

        /// <returns>Endpoint resolution response</returns>

        System.Threading.Tasks.Task<EndpointResolutionResponse> ResolveAsync(EndpointResolutionRequest body);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [Microsoft.AspNetCore.Mvc.Route("workload")]

    public partial class EndpointResolutionController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IEndpointResolutionController _implementation;

        public EndpointResolutionController(IEndpointResolutionController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// Resolve an endpoint for a given service called by Microsoft Fabric
        /// </summary>
        /// <remarks>
        /// Resolves the endpoint for a given service called by Microsoft Fabric based on the tenant's region and workspace region. Fabric provides a set of context properties and returns the appropriate service endpoint URL and its time-to-live (TTL).
        /// <br/>
        /// <br/>The Endpoint Resolution API is crucial for services that require dynamic endpoint determination based on operational context. This allows for optimized routing and regional compliance.
        /// <br/>
        /// <br/>To resolve an endpoint, Fabric will send a POST request with the required context properties in the request body. The response will contain the resolved URL and its TTL, which indicates how long the URL is considered valid.
        /// <br/>
        /// <br/>For a sample implementation and usage examples, please refer to the [Endpoint Resolution Sample Code](https://github.com/microsoft/Microsoft-Fabric-workload-development-sample/blob/main/Backend/src/Controllers/EndpointResolutionControllerImpl.cs).
        /// </remarks>
        /// <param name="body">Endpoint resolution request payload</param>
        /// <returns>Endpoint resolution response</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("resolve-api-path-placeholder")]
        public System.Threading.Tasks.Task<EndpointResolutionResponse> Resolve([Microsoft.AspNetCore.Mvc.FromBody] EndpointResolutionRequest body)
        {

            return _implementation.ResolveAsync(body);
        }

    }

    /// <summary>
    /// The source of the error.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ErrorSource
    {

        [System.Runtime.Serialization.EnumMember(Value = @"System")]
        System = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"External")]
        External = 2,

    }

    /// <summary>
    /// The job invoke type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum JobInvokeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UnknownFutureValue")]
        UnknownFutureValue = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Scheduled")]
        Scheduled = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Manual")]
        Manual = 2,

    }

    /// <summary>
    /// The status of an item job instance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum JobInstanceStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NotStarted")]
        NotStarted = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"InProgress")]
        InProgress = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Completed")]
        Completed = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Cancelled")]
        Cancelled = 4,

    }

    /// <summary>
    /// A name-value pair.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NameValuePair
    {
        /// <summary>
        /// The name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

    }

    /// <summary>
    /// The basic error information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorBasicInformation
    {
        /// <summary>
        /// The error code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// The error message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// A list of parameters for formatting a localized message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("messageParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IList<string> MessageParameters { get; set; }

    }

    /// <summary>
    /// The extended error information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorExtendedInformation : ErrorBasicInformation
    {
        /// <summary>
        /// A list of additional parameters specific to the error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("additionalParameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IList<NameValuePair> AdditionalParameters { get; set; }

    }

    /// <summary>
    /// The error details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorDetails : ErrorBasicInformation
    {
        /// <summary>
        /// The error source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ErrorSource Source { get; set; }

        /// <summary>
        /// Indicates whether the error is permanent or the operation can be retried.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPermanent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPermanent { get; set; }

        /// <summary>
        /// A list of additional error details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moreDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IList<ErrorExtendedInformation> MoreDetails { get; set; }

    }

    /// <summary>
    /// The error response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ErrorResponse : ErrorDetails
    {

    }

    /// <summary>
    /// Creation payload specific to the workload and item type. Fabric forwards this payload as-is to your backend system without storing or examining its contents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateItemPayload
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Update payload specific to the workload and item type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateItemPayload
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Item payload specific to the workload and item type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemPayload
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Job instance creation payload specific to the workload, item and job type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateItemJobInstancePayload
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Create item request content.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateItemRequest
    {
        /// <summary>
        /// The item display name. Cannot exceed 256 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The item description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Creation payload specific to the workload and item type. Passed by the item editor or as Fabric automation API parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creationPayload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreateItemPayload CreationPayload { get; set; }

    }

    /// <summary>
    /// Update item request content. This content has 'PATCH' semantics: for properties which are not provided (null) the item current values should be preserved.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateItemRequest
    {
        /// <summary>
        /// The item display name. Cannot exceed 256 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The item description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Update payload specific to the workload and item type. Passed by the item editor or as Fabric automation API parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatePayload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UpdateItemPayload UpdatePayload { get; set; }

    }

    /// <summary>
    /// The item payload for the item editor.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetItemPayloadResponse
    {
        /// <summary>
        /// Payload specific to the workload and item type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itemPayload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ItemPayload ItemPayload { get; set; }

    }

    /// <summary>
    /// The parameters controlling the job instance execution.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateItemJobInstanceRequest
    {
        /// <summary>
        /// The item job invoke type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invokeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JobInvokeType InvokeType { get; set; }

        /// <summary>
        /// Creation payload specific to the workload, item and job type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creationPayload", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreateItemJobInstancePayload CreationPayload { get; set; }

    }

    /// <summary>
    /// The job instance state.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ItemJobInstanceState
    {
        /// <summary>
        /// The status of the job instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JobInstanceStatus Status { get; set; }

        /// <summary>
        /// The job instance start time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startTimeUtc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartTimeUtc { get; set; }

        /// <summary>
        /// The job instance end time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endTimeUtc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndTimeUtc { get; set; }

        /// <summary>
        /// The error details in case of the job instance failure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorDetails ErrorDetails { get; set; }

    }

    /// <summary>
    /// The name of the property for endpoint resolution context.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EndpointResolutionContextPropertyName
    {

        [System.Runtime.Serialization.EnumMember(Value = @"EndpointName")]
        EndpointName = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TenantRegion")]
        TenantRegion = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"WorkspaceRegion")]
        WorkspaceRegion = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TenantId")]
        TenantId = 3,

    }

    /// <summary>
    /// Defines a context property used in endpoint resolution. This property must be specified in the workload manifest to ensure correct endpoint determination by Fabric.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EndpointResolutionContextProperty
    {
        /// <summary>
        /// The name of the context property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EndpointResolutionContextPropertyName Name { get; set; }

        /// <summary>
        /// The value of the context property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EndpointResolutionRequest
    {
        /// <summary>
        /// Array of context properties for endpoint resolution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("context", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IList<EndpointResolutionContextProperty> Context { get; set; } = new System.Collections.Generic.List<EndpointResolutionContextProperty>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EndpointResolutionResponse
    {
        /// <summary>
        /// The resolved URL of the service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }

        /// <summary>
        /// Time to live in minutes for the resolved URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ttlInMinutes", Required = Newtonsoft.Json.Required.Always)]
        public int TtlInMinutes { get; set; }

    }


}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625